#!/usr/bin/env python3

"""
Sample script to analyze a JSON-formatted DNS log generated by Zeek.

Usage:
Generate a JSON-formatted DNS log using Zeek, then run the script.
$ zeek -r ./dns.pcap local Log::default_logdir=./ -C LogAscii::use_json=T
$ ./analyze_zeek_dns_json_log.py -f dns.log 
"""

import datetime
import argparse
import json

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', type=str, required=True, help='Specify the JSON format file generated by zeek')
args = parser.parse_args()
json_file = args.file

def load_log_file(file=''):
    """
    Load the zeek log and put them into the list
    """
    dns_log = list()
    with open('dns.log', 'r') as f:
        for line in f:
            json_line = json.loads(line)
            dns_log.append(json_line)
    return dns_log

def count_result_code(log='dns_log'):
    """
    Count the number of unique result codes.
    """
    result = dict()
    for i in dns_log:
        if 'rcode_name' in i.keys():
            if i['rcode_name'] in result.keys():
                result[i['rcode_name']] += 1
            else:
                result[i['rcode_name']] = 1
    return result

def count_src_ip(log='dns_log'):
    """
    Count the number of unique source IP addresses
    """
    result = dict()
    for i in dns_log:
        if 'id.orig_h' in i.keys():
            if i['id.orig_h'] in result.keys():
                result[i['id.orig_h']] += 1
            else:
                result[i['id.orig_h']] = 1
    sorted_result = sorted(result.items(), key=lambda x:x[1]) 
    return sorted_result

def count_qtype(log='dns_log'):
    """
    Count the number of unique query types
    """
    result = dict()
    for i in dns_log:
        if 'qtype_name' in i.keys(): 
            if i['qtype_name'] in result.keys():
                result[i['qtype_name']] += 1
            else:
                result[i['qtype_name']] = 1
    return result

def count_2nd_level(log='dns_log'):
    result = dict()
    for i in dns_log:
        if 'query' in i.keys():
            a = i['query'].split('.')
            if a[-1] and a[-2]:
                a = a[-2] + '.' + a[-1]
                if a in result.keys():
                    result[a] += 1
                else:
                    result[a] = 1
    sorted_result = sorted(result.items(), key=lambda x:x[1]) 
    return sorted_result

def count_3rd_level(log='dns_log'):
    result = dict()
    for i in dns_log:
        if 'query' in i.keys():
            a = i['query'].split('.')
            if a[-1] and a[-2] and a[-3]:
                a = a[-3] + '.' + a[-2] + '.' + a[-1]
                if a in result.keys():
                    result[a] += 1
                else:
                    result[a] = 1
    sorted_result = sorted(result.items(), key=lambda x:x[1]) 
    return sorted_result


if __name__ == "__main__":
    # load the log file, put them into the list
    dns_log = load_log_file(file=json_file)

    # print timestamp
    start_time = datetime.datetime.fromtimestamp(dns_log[0]['ts']).strftime('%c')
    end_time = datetime.datetime.fromtimestamp(dns_log[-1]['ts']).strftime('%c')
    print(f"# Result from {start_time} to {end_time}")

    # count result codes
    result = count_result_code()
    print("# Result codes")
    print(result)
    print("")

    # count source IP addresses
    result = count_src_ip()
    print("# Source IP addresses")
    print(result)
    print("")

    # count query types
    result = count_qtype()
    print("# Query types")
    print(result)
    print("")

    # top 10 domains, 2nd level
    result = count_2nd_level()
    print("# Top 10 domains, 2nd level")
    counter = -1
    for _ in range(0,10):
        print(result[counter])
        counter -= 1
    print("")

    # top 10 domains, 3rd level
    result = count_3rd_level()
    print("# Top 10 domains, 3rd level")
    counter = -1
    for _ in range(0,10):
        print(result[counter])
        counter -= 1
    print("")